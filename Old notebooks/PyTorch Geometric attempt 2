{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"PyTorch Geometric attempt 2","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNMHeHBzxK8nnDNHBZAafNn"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xKHtYAKog8Q1","executionInfo":{"status":"ok","timestamp":1626684315166,"user_tz":-60,"elapsed":14152,"user":{"displayName":"Andrea Pozzetti","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg6o9QTNbok0HkZfpHXspREgVRBWoP1c2f7EvE8MLbVK4DG0GGhH72U-FDOK19JJYoGDTMrbPfzqnpFiOV4tLcYreHUYkllSkNyMG7nog1kpFx1t2erIhCnXvd8jYNZmS8o9iqKgiSxclkfeMU1ZDwiwjEPZUvYblQ8rxEBoZCvnbfJGTgLNIi7lubN90kPWhFxayoNQ5JKp5Kz1jH0EzdBNZZrJILN4aALUgaJJsclbRU-rIWFjsOOQe36MBnN6s_re71sge7ljQ2_pNnCQkcnmmq079QTReDFWdy_q1gDRT1lUnney2n4KAsgSzdqDX13jsZpV7W2suCmmsRavsNA3EeAtcw_HDicwQQzTpWAulxjo8RaH-wk8TICmgZLU6IVrdxv4_TSEJb9gt2AEEn24enJjAjRWKPj6xNyM-iOdjpedMPO9Sa3WYIqVPpjvMN9_NXh4RkwDLj_zYHZBYcPb10EMI7DrY_a2Lz2jSQVe-gcltXg07SK9S6xsD93q3jRJoL4N2qNqVEpbCxLT-b1yBGhBxz-DEZSAuLXk2rVl2ln_g8m5mlJtSanxolgckkbqWcnl2H8HdoVJ12tAvhu5LBBERC40JwimLd_gWPUkyBEWOOtNFBMzLuov6rVU3YwMNvON2QMPRAF2ILQXnPLN9ZpsNkEKeO7WY7nPbdx0nZ8w6H_Qq4KVhgzTpaia6ngqX30J4e-CgRDgXRfw0IeOlW4nY_e47GmF2QVO3Gl2ilNJFAyxwiYGsArUfqNtTEEUw=s64","userId":"06140975756763565116"}},"outputId":"f90e097b-42b9-48e9-9627-0addaa1d6bd3"},"source":["!pip install torch-scatter -f https://pytorch-geometric.com/whl/torch-1.9.0+cu102.html\n","!pip install torch-sparse -f https://pytorch-geometric.com/whl/torch-1.9.0+cu102.html\n","!pip install torch-geometric\n","!pip install tensorboardX"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Looking in links: https://pytorch-geometric.com/whl/torch-1.9.0+cu102.html\n","Collecting torch-scatter\n","\u001b[?25l  Downloading https://pytorch-geometric.com/whl/torch-1.9.0%2Bcu102/torch_scatter-2.0.7-cp37-cp37m-linux_x86_64.whl (2.6MB)\n","\u001b[K     |████████████████████████████████| 2.6MB 10.9MB/s \n","\u001b[?25hInstalling collected packages: torch-scatter\n","Successfully installed torch-scatter-2.0.7\n","Looking in links: https://pytorch-geometric.com/whl/torch-1.9.0+cu102.html\n","Collecting torch-sparse\n","\u001b[?25l  Downloading https://pytorch-geometric.com/whl/torch-1.9.0%2Bcu102/torch_sparse-0.6.10-cp37-cp37m-linux_x86_64.whl (1.4MB)\n","\u001b[K     |████████████████████████████████| 1.4MB 14.8MB/s \n","\u001b[?25hRequirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from torch-sparse) (1.4.1)\n","Requirement already satisfied: numpy>=1.13.3 in /usr/local/lib/python3.7/dist-packages (from scipy->torch-sparse) (1.19.5)\n","Installing collected packages: torch-sparse\n","Successfully installed torch-sparse-0.6.10\n","Collecting torch-geometric\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/91/61/b3f23832120c404673f6759008312ffe8269524a29bf6116d9980e44517b/torch_geometric-1.7.2.tar.gz (222kB)\n","\u001b[K     |████████████████████████████████| 225kB 14.7MB/s \n","\u001b[?25hRequirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from torch-geometric) (1.19.5)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.7/dist-packages (from torch-geometric) (4.41.1)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from torch-geometric) (1.4.1)\n","Requirement already satisfied: networkx in /usr/local/lib/python3.7/dist-packages (from torch-geometric) (2.5.1)\n","Requirement already satisfied: python-louvain in /usr/local/lib/python3.7/dist-packages (from torch-geometric) (0.15)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.7/dist-packages (from torch-geometric) (0.22.2.post1)\n","Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from torch-geometric) (2.23.0)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.7/dist-packages (from torch-geometric) (1.1.5)\n","Collecting rdflib\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/d0/6b/6454aa1db753c0f8bc265a5bd5c10b5721a4bb24160fb4faf758cf6be8a1/rdflib-5.0.0-py3-none-any.whl (231kB)\n","\u001b[K     |████████████████████████████████| 235kB 43.9MB/s \n","\u001b[?25hRequirement already satisfied: googledrivedownloader in /usr/local/lib/python3.7/dist-packages (from torch-geometric) (0.4)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.7/dist-packages (from torch-geometric) (2.11.3)\n","Requirement already satisfied: pyparsing in /usr/local/lib/python3.7/dist-packages (from torch-geometric) (2.4.7)\n","Requirement already satisfied: decorator<5,>=4.3 in /usr/local/lib/python3.7/dist-packages (from networkx->torch-geometric) (4.4.2)\n","Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn->torch-geometric) (1.0.1)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests->torch-geometric) (1.24.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests->torch-geometric) (2021.5.30)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests->torch-geometric) (3.0.4)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->torch-geometric) (2.10)\n","Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas->torch-geometric) (2018.9)\n","Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas->torch-geometric) (2.8.1)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from rdflib->torch-geometric) (1.15.0)\n","Collecting isodate\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/9b/9f/b36f7774ff5ea8e428fdcfc4bb332c39ee5b9362ddd3d40d9516a55221b2/isodate-0.6.0-py2.py3-none-any.whl (45kB)\n","\u001b[K     |████████████████████████████████| 51kB 8.8MB/s \n","\u001b[?25hRequirement already satisfied: MarkupSafe>=0.23 in /usr/local/lib/python3.7/dist-packages (from jinja2->torch-geometric) (2.0.1)\n","Building wheels for collected packages: torch-geometric\n","  Building wheel for torch-geometric (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for torch-geometric: filename=torch_geometric-1.7.2-cp37-none-any.whl size=388143 sha256=e151127710ffac4e849da81010cb5ea03ebc94b85057152b8bc171aa8dcc18ac\n","  Stored in directory: /root/.cache/pip/wheels/e7/66/5b/ad17ef7f04b7c425dc6930daac160c3747231b0d65f9ac7972\n","Successfully built torch-geometric\n","Installing collected packages: isodate, rdflib, torch-geometric\n","Successfully installed isodate-0.6.0 rdflib-5.0.0 torch-geometric-1.7.2\n","Collecting tensorboardX\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/99/0b/a26bbe92667c549d39c40b80c5ddec638fbae9521f04aeef26560e07e504/tensorboardX-2.4-py2.py3-none-any.whl (124kB)\n","\u001b[K     |████████████████████████████████| 133kB 13.6MB/s \n","\u001b[?25hRequirement already satisfied: protobuf>=3.8.0 in /usr/local/lib/python3.7/dist-packages (from tensorboardX) (3.17.3)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from tensorboardX) (1.19.5)\n","Requirement already satisfied: six>=1.9 in /usr/local/lib/python3.7/dist-packages (from protobuf>=3.8.0->tensorboardX) (1.15.0)\n","Installing collected packages: tensorboardX\n","Successfully installed tensorboardX-2.4\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"5LjpxkvXhOuq"},"source":["import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","\n","import torch_geometric.nn as pyg_nn\n","import torch_geometric.utils as pyg_utils\n","\n","import time\n","from datetime import datetime\n","\n","import networkx as nx\n","import numpy as np\n","import torch\n","import torch.optim as optim\n","\n","from torch_geometric.datasets import TUDataset\n","from torch_geometric.datasets import Planetoid\n","from torch_geometric.data import DataLoader\n","import torch_geometric\n","import torch_geometric.transforms as T\n","\n","from tensorboardX import SummaryWriter\n","from sklearn.manifold import TSNE\n","import matplotlib.pyplot as plt"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OWVj8XeA6Oow","executionInfo":{"status":"ok","timestamp":1626684376898,"user_tz":-60,"elapsed":54580,"user":{"displayName":"Andrea Pozzetti","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg6o9QTNbok0HkZfpHXspREgVRBWoP1c2f7EvE8MLbVK4DG0GGhH72U-FDOK19JJYoGDTMrbPfzqnpFiOV4tLcYreHUYkllSkNyMG7nog1kpFx1t2erIhCnXvd8jYNZmS8o9iqKgiSxclkfeMU1ZDwiwjEPZUvYblQ8rxEBoZCvnbfJGTgLNIi7lubN90kPWhFxayoNQ5JKp5Kz1jH0EzdBNZZrJILN4aALUgaJJsclbRU-rIWFjsOOQe36MBnN6s_re71sge7ljQ2_pNnCQkcnmmq079QTReDFWdy_q1gDRT1lUnney2n4KAsgSzdqDX13jsZpV7W2suCmmsRavsNA3EeAtcw_HDicwQQzTpWAulxjo8RaH-wk8TICmgZLU6IVrdxv4_TSEJb9gt2AEEn24enJjAjRWKPj6xNyM-iOdjpedMPO9Sa3WYIqVPpjvMN9_NXh4RkwDLj_zYHZBYcPb10EMI7DrY_a2Lz2jSQVe-gcltXg07SK9S6xsD93q3jRJoL4N2qNqVEpbCxLT-b1yBGhBxz-DEZSAuLXk2rVl2ln_g8m5mlJtSanxolgckkbqWcnl2H8HdoVJ12tAvhu5LBBERC40JwimLd_gWPUkyBEWOOtNFBMzLuov6rVU3YwMNvON2QMPRAF2ILQXnPLN9ZpsNkEKeO7WY7nPbdx0nZ8w6H_Qq4KVhgzTpaia6ngqX30J4e-CgRDgXRfw0IeOlW4nY_e47GmF2QVO3Gl2ilNJFAyxwiYGsArUfqNtTEEUw=s64","userId":"06140975756763565116"}},"outputId":"63bc3c50-a496-43cd-e00b-2934341ca7b7"},"source":["from google.colab import drive\n","import os\n","drive.mount('/content/gdrive/')\n","os.chdir(\"/content/gdrive/MyDrive/DISSERTATION\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Mounted at /content/gdrive/\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NMANKZRLZSYt","executionInfo":{"status":"ok","timestamp":1626684710565,"user_tz":-60,"elapsed":9826,"user":{"displayName":"Andrea Pozzetti","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg6o9QTNbok0HkZfpHXspREgVRBWoP1c2f7EvE8MLbVK4DG0GGhH72U-FDOK19JJYoGDTMrbPfzqnpFiOV4tLcYreHUYkllSkNyMG7nog1kpFx1t2erIhCnXvd8jYNZmS8o9iqKgiSxclkfeMU1ZDwiwjEPZUvYblQ8rxEBoZCvnbfJGTgLNIi7lubN90kPWhFxayoNQ5JKp5Kz1jH0EzdBNZZrJILN4aALUgaJJsclbRU-rIWFjsOOQe36MBnN6s_re71sge7ljQ2_pNnCQkcnmmq079QTReDFWdy_q1gDRT1lUnney2n4KAsgSzdqDX13jsZpV7W2suCmmsRavsNA3EeAtcw_HDicwQQzTpWAulxjo8RaH-wk8TICmgZLU6IVrdxv4_TSEJb9gt2AEEn24enJjAjRWKPj6xNyM-iOdjpedMPO9Sa3WYIqVPpjvMN9_NXh4RkwDLj_zYHZBYcPb10EMI7DrY_a2Lz2jSQVe-gcltXg07SK9S6xsD93q3jRJoL4N2qNqVEpbCxLT-b1yBGhBxz-DEZSAuLXk2rVl2ln_g8m5mlJtSanxolgckkbqWcnl2H8HdoVJ12tAvhu5LBBERC40JwimLd_gWPUkyBEWOOtNFBMzLuov6rVU3YwMNvON2QMPRAF2ILQXnPLN9ZpsNkEKeO7WY7nPbdx0nZ8w6H_Qq4KVhgzTpaia6ngqX30J4e-CgRDgXRfw0IeOlW4nY_e47GmF2QVO3Gl2ilNJFAyxwiYGsArUfqNtTEEUw=s64","userId":"06140975756763565116"}},"outputId":"722b02e8-68d8-4b9a-b45f-00d6643cfb4a"},"source":["#Importing a bunch of stuff from MeshCNN\n","os.chdir(\"./MeshCNN\")\n","print(os.listdir())\n","import models\n","import options.train_options\n","os.chdir(\"./util\")\n","import mesh_viewer\n","os.chdir(\"..\")\n","os.chdir(\"./models\")\n","import networks\n","os.chdir(\"./layers\")\n","import mesh"],"execution_count":null,"outputs":[{"output_type":"stream","text":["['.git', '.gitignore', '.travis.yml', 'LICENSE', 'README.md', 'data', 'docs', 'environment.yml', 'models', 'options', 'scripts', 'test.py', 'train.py', 'util', 'cache']\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"JAyEN4a1Zv97"},"source":["os.chdir(\"../../..\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"h5mJpmWSl0KQ"},"source":["class opt:\n","  num_aug = 1\n","\n","fpcmesh = mesh.Mesh(\"fpc3.obj\",opt=opt)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"lrfXj-_YZz_O"},"source":["def loadfpcvert(index):\n","  vels = open(\"./csv_data/data_\"+ str(index) + \".csv\")\n","  velocities = torch.Tensor(np.loadtxt(vels, delimiter=\",\")[:,3:5])\n","  return velocities"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"NSzuuaG06Ek-"},"source":["NPMatrix = torch.tensor(fpcmesh.vs[:,:2])\n","Gconn = torch.tensor(fpcmesh.edges, dtype=torch.long).t().contiguous()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YlcBs1ciaUUv","executionInfo":{"status":"ok","timestamp":1626684712857,"user_tz":-60,"elapsed":6,"user":{"displayName":"Andrea Pozzetti","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg6o9QTNbok0HkZfpHXspREgVRBWoP1c2f7EvE8MLbVK4DG0GGhH72U-FDOK19JJYoGDTMrbPfzqnpFiOV4tLcYreHUYkllSkNyMG7nog1kpFx1t2erIhCnXvd8jYNZmS8o9iqKgiSxclkfeMU1ZDwiwjEPZUvYblQ8rxEBoZCvnbfJGTgLNIi7lubN90kPWhFxayoNQ5JKp5Kz1jH0EzdBNZZrJILN4aALUgaJJsclbRU-rIWFjsOOQe36MBnN6s_re71sge7ljQ2_pNnCQkcnmmq079QTReDFWdy_q1gDRT1lUnney2n4KAsgSzdqDX13jsZpV7W2suCmmsRavsNA3EeAtcw_HDicwQQzTpWAulxjo8RaH-wk8TICmgZLU6IVrdxv4_TSEJb9gt2AEEn24enJjAjRWKPj6xNyM-iOdjpedMPO9Sa3WYIqVPpjvMN9_NXh4RkwDLj_zYHZBYcPb10EMI7DrY_a2Lz2jSQVe-gcltXg07SK9S6xsD93q3jRJoL4N2qNqVEpbCxLT-b1yBGhBxz-DEZSAuLXk2rVl2ln_g8m5mlJtSanxolgckkbqWcnl2H8HdoVJ12tAvhu5LBBERC40JwimLd_gWPUkyBEWOOtNFBMzLuov6rVU3YwMNvON2QMPRAF2ILQXnPLN9ZpsNkEKeO7WY7nPbdx0nZ8w6H_Qq4KVhgzTpaia6ngqX30J4e-CgRDgXRfw0IeOlW4nY_e47GmF2QVO3Gl2ilNJFAyxwiYGsArUfqNtTEEUw=s64","userId":"06140975756763565116"}},"outputId":"5b7fd05b-a142-4c9b-b953-6cf16ec24488"},"source":["Gconn.size()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["torch.Size([2, 10421])"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jbJlOR-ebc0Y","executionInfo":{"status":"ok","timestamp":1626684723427,"user_tz":-60,"elapsed":10574,"user":{"displayName":"Andrea Pozzetti","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg6o9QTNbok0HkZfpHXspREgVRBWoP1c2f7EvE8MLbVK4DG0GGhH72U-FDOK19JJYoGDTMrbPfzqnpFiOV4tLcYreHUYkllSkNyMG7nog1kpFx1t2erIhCnXvd8jYNZmS8o9iqKgiSxclkfeMU1ZDwiwjEPZUvYblQ8rxEBoZCvnbfJGTgLNIi7lubN90kPWhFxayoNQ5JKp5Kz1jH0EzdBNZZrJILN4aALUgaJJsclbRU-rIWFjsOOQe36MBnN6s_re71sge7ljQ2_pNnCQkcnmmq079QTReDFWdy_q1gDRT1lUnney2n4KAsgSzdqDX13jsZpV7W2suCmmsRavsNA3EeAtcw_HDicwQQzTpWAulxjo8RaH-wk8TICmgZLU6IVrdxv4_TSEJb9gt2AEEn24enJjAjRWKPj6xNyM-iOdjpedMPO9Sa3WYIqVPpjvMN9_NXh4RkwDLj_zYHZBYcPb10EMI7DrY_a2Lz2jSQVe-gcltXg07SK9S6xsD93q3jRJoL4N2qNqVEpbCxLT-b1yBGhBxz-DEZSAuLXk2rVl2ln_g8m5mlJtSanxolgckkbqWcnl2H8HdoVJ12tAvhu5LBBERC40JwimLd_gWPUkyBEWOOtNFBMzLuov6rVU3YwMNvON2QMPRAF2ILQXnPLN9ZpsNkEKeO7WY7nPbdx0nZ8w6H_Qq4KVhgzTpaia6ngqX30J4e-CgRDgXRfw0IeOlW4nY_e47GmF2QVO3Gl2ilNJFAyxwiYGsArUfqNtTEEUw=s64","userId":"06140975756763565116"}},"outputId":"24abb0bb-44bc-4910-96df-9a52197774f3"},"source":["loadfpcvert(20).size()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["torch.Size([3571, 2])"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"id":"IlYDy_Dg6YCb"},"source":["graph = torch_geometric.data.Data(x = loadfpcvert(20), edge_index=Gconn, pos = NPMatrix)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"xk_8csDI696q"},"source":["class GNNStack(nn.Module):\n","    def __init__(self, input_dim, hidden_dim, output_dim, task='node'):\n","        super(GNNStack, self).__init__()\n","        self.task = task\n","        self.convs = nn.ModuleList()\n","        self.convs.append(self.build_conv_model(input_dim, hidden_dim))\n","        self.lns = nn.ModuleList()\n","        self.lns.append(nn.LayerNorm(hidden_dim))\n","        self.lns.append(nn.LayerNorm(hidden_dim))\n","        for l in range(2):\n","            self.convs.append(self.build_conv_model(hidden_dim, hidden_dim))\n","\n","        # post-message-passing\n","        self.post_mp = nn.Sequential(\n","            nn.Linear(hidden_dim, hidden_dim), nn.Dropout(0.25), \n","            nn.Linear(hidden_dim, output_dim))\n","        if not (self.task == 'node' or self.task == 'graph'):\n","            raise RuntimeError('Unknown task.')\n","\n","        self.dropout = 0.25\n","        self.num_layers = 3\n","\n","    def build_conv_model(self, input_dim, hidden_dim):\n","        # refer to pytorch geometric nn module for different implementation of GNNs.\n","        if self.task == 'node':\n","            return pyg_nn.GCNConv(input_dim, hidden_dim)\n","        else:\n","            return pyg_nn.GINConv(nn.Sequential(nn.Linear(input_dim, hidden_dim),\n","                                  nn.ReLU(), nn.Linear(hidden_dim, hidden_dim)))\n","\n","    def forward(self, data):\n","        x, edge_index, batch = data.x, data.edge_index, data.batch\n","        if data.num_node_features == 0:\n","          x = torch.ones(data.num_nodes, 1)\n","\n","        for i in range(self.num_layers):\n","            x = self.convs[i](x, edge_index)\n","            emb = x\n","            x = F.relu(x)\n","            x = F.dropout(x, p=self.dropout, training=self.training)\n","            if not i == self.num_layers - 1:\n","                x = self.lns[i](x)\n","\n","        if self.task == 'graph':\n","            x = pyg_nn.global_mean_pool(x, batch)\n","\n","        x = self.post_mp(x)\n","\n","        return emb, F.log_softmax(x, dim=1)\n","\n","    def loss(self, pred, label):\n","        return F.nll_loss(pred, label)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"3vWsxWoF7y79"},"source":["train_set = torch.load('./TENS/train_tensor.pt', map_location=torch.device('cpu'))\n","valid_set = torch.load('./TENS/valid_tensor.pt', map_location=torch.device('cpu'))\n","test_set = torch.load('./TENS/test_tensor.pt', map_location=torch.device('cpu'))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"7Gwl_o397vu_"},"source":["def train(autoencoder, optimizer, criterion, dataloader):\n","  counter = 0\n","  autoencoder.train()\n","  train_loss, data_length = 0, len(dataloader.dataset)\n","  for batch in dataloader:\n","      counter +=1\n","      meshes = []\n","      for i in range(dataloader.batch_size):\n","        fpcmesh = mesh.Mesh(\"fpc3.obj\",opt=opt)\n","        fpcmesh.init_history()\n","        meshes.append(fpcmesh)\n","      # fpcmesh = mesh.Mesh(\"fpc3.obj\",opt=opt)\n","      # fpcmesh.init_history()\n","      batch = batch.to(device)  # Send batch of images to the GPU\n","      optimizer.zero_grad()  # Set optimiser grad to 0\n","      x_hat = autoencoder(batch,meshes)  # Generate predicted images (x_hat) by running batch of images through autoencoder\n","      # print(\"hello\")\n","      # print(batch.size(),x_hat.size())\n","      MSE = criterion(batch, x_hat)  # Calculate MSE loss\n","      print(MSE,counter)\n","      MSE.backward()  # Back-propagate\n","      optimizer.step()  # Step the optimiser\n","      train_loss += MSE * batch.size(0)\n","\n","  return train_loss / data_length  # Return MSE\n","\n","def validate(autoencoder, optimizer, criterion, dataloader):\n","    autoencoder.eval()\n","    validation_loss, data_length = 0, len(dataloader.dataset)\n","    for batch in dataloader:\n","        with torch.no_grad():\n","            meshes = []\n","            for i in range(dataloader.batch_size):\n","              fpcmesh = mesh.Mesh(\"fpc3.obj\",opt=opt)\n","              fpcmesh.init_history()\n","              meshes.append(fpcmesh)\n","            batch = batch.to(device)  # Send batch of images to the GPU\n","            x_hat = autoencoder(batch,meshes)  # Generate predicted images (x_hat) by running batch of images through autoencoder\n","            MSE = criterion(batch, x_hat)  # Calculate MSE loss\n","            validation_loss += MSE * batch.size(0)\n","\n","    return validation_loss / data_length   # Return MSE"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"xP0mIkDU7vyB"},"source":["def train_model(autoencoder, batch_size=4, n_epochs = 10, visualize=True):\n","  set_seed(42)\n","  autoencoder = autoencoder.to(device)\n","  optimizer = torch.optim.Adam(autoencoder.parameters())\n","\n","  # we choose the MSE to be the loss function \n","  criterion = nn.MSELoss()\n","\n","  train_loader = DataLoader(train_set, batch_size=batch_size, shuffle=True, num_workers=0)\n","  valid_loader = DataLoader(valid_set, batch_size=batch_size, shuffle=True, num_workers=0)\n","  \n","  # do livelossplot if visualize turned-on\n","  if visualize:\n","      liveloss = PlotLosses()\n","\n","  for epoch in range(n_epochs):\n","    train_MSE = train(autoencoder, optimizer, criterion, train_loader)\n","    validation_MSE = validate(autoencoder, optimizer, criterion, valid_loader)\n","    print(\"eppoch %d starting......\"%(epoch))\n","    \n","    # do livelossplot if visualize turned-on \n","    if visualize: \n","      logs = {}\n","\n","      logs['' + 'log loss'] = train_MSE.item()\n","      logs['val_' + 'log loss'] = validation_MSE.item()\n","\n","      liveloss.update(logs)\n","      liveloss.draw()\n","\n","      \n","  return autoencoder"],"execution_count":null,"outputs":[]}]}